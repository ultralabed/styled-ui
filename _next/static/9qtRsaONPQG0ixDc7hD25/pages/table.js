(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{"+wNj":function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}t.d(n,"a",(function(){return a}))},GYcT:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return d}));var a=t("cxan"),l=t("HbGN"),r=t("ERkP"),o=t.n(r),c=t("ZVZ0"),b=(o.a.createElement,{}),i="wrapper";function d(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(c.b)(i,Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"Table"),Object(c.b)("h2",null,"Import"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Table"),": The wrapper that provides props, state, and context to its children."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableHeader"),": The header of the table."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableHeaderRow"),": The header row of the table."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableHeaderCell"),": The header cell of the table."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableBody"),": The body of the table."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableRow"),": The body row of the table."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableCell"),": The body cell of the table.")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { Table, TableHeader, TableHeaderRow, TableHeaderCell, TableBody, TableRow, TableCell } from '@trendmicro/react-styled-ui';\n// or\nimport Table from '@trendmicro/react-styled-ui/Table';\n")),Object(c.b)("h2",null,"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Table>\n  <TableHeader>\n    <TableHeaderRow>\n      <TableHeaderCell>Event Type</TableHeaderCell>\n      <TableHeaderCell>Detections</TableHeaderCell>\n    </TableHeaderRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>634</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>778</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>URL Filtering</TableCell>\n      <TableCell>598</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n")),Object(c.b)("h3",null,"Variants"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Table. You can set the value to ",Object(c.b)("inlineCode",{parentName:"p"},"default"),", ",Object(c.b)("inlineCode",{parentName:"p"},"outline"),"."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"default"),": Only add bottom border into cells, including table header."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"outline"),": Adds borders on all sides of the table and cells.")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack direction="row" spacing="4x">\n  {["default", "outline"].map(variant => (\n    <Stack direction="column" spacing="4x" shouldWrapChildren>\n      <Text>{variant}</Text>\n      <Table variant={variant} key={variant}>\n        <TableHeader>\n          <TableHeaderRow>\n            <TableHeaderCell>Event Type</TableHeaderCell>\n            <TableHeaderCell>Detections</TableHeaderCell>\n          </TableHeaderRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>634</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>778</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>URL Filtering</TableCell>\n            <TableCell>598</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Stack>\n  ))}\n</Stack>\n')),Object(c.b)("h3",null,"Sizes"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"size")," prop to change the padding of the ",Object(c.b)("inlineCode",{parentName:"p"},"<TableCell>"),". You can set the value to ",Object(c.b)("inlineCode",{parentName:"p"},"sm"),", ",Object(c.b)("inlineCode",{parentName:"p"},"md"),", or ",Object(c.b)("inlineCode",{parentName:"p"},"lg"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack direction="column" spacing="6x" shouldWrapChildren>\n  {["sm", "md", "lg"].map(size => (\n    <>\n      <Text>Size: {size}</Text>\n      <Space width="4x" />\n      <Table variant="outline" size={size} key={size}>\n        <TableHeader>\n          <TableHeaderRow>\n            <TableHeaderCell>Event Type</TableHeaderCell>\n            <TableHeaderCell>Detections</TableHeaderCell>\n          </TableHeaderRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>634</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>778</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>URL Filtering</TableCell>\n            <TableCell>598</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  ))}\n</Stack>\n')),Object(c.b)("h3",null,"Hoverable"),Object(c.b)("p",null,"Enable a hover state on TableRows."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Table isHoverable>\n  <TableHeader>\n    <TableHeaderRow>\n      <TableHeaderCell>Event Type</TableHeaderCell>\n      <TableHeaderCell>Detections</TableHeaderCell>\n    </TableHeaderRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>634</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>778</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>URL Filtering</TableCell>\n      <TableCell>598</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n")),Object(c.b)("h2",null,"Custom tables"),Object(c.b)("p",null,"In the following examples, we demonstrate how to use ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/tannerlinsley/react-table"}),Object(c.b)("inlineCode",{parentName:"a"},"react-table"))," with the Table component."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"import { useTable, useBlockLayout, useRowSelect, useSortBy } from 'react-table';")),Object(c.b)("h3",null,"Base table"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"function BaseTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Table\n      isHoverable\n      {...getTableProps()}\n    >\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps()}>{column.render('Header')}</TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()}>\n              {\n                row.cells.map(cell => {\n                  return (<TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>);\n                })\n              }\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(<BaseTable />);\n")),Object(c.b)("h3",null,"Selectable table"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n\n  return (\n    <Checkbox\n      ref={resolvedRef}\n      indeterminate={indeterminate}\n      {...rest}\n    />\n  );\n});\n\nfunction SelectableTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: { selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </Flex>\n          ),\n          Cell: ({ row }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </Flex>\n          ),\n          width: 41,\n        },\n        ...columns,\n      ]);\n    }\n  );\n\n  return (\n    <>\n      <Table isHoverable {...getTableProps()}>\n        <TableHeader>\n          {headerGroups.map(headerGroup => (\n            <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableHeaderCell {...column.getHeaderProps()}>{column.render('Header')}</TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody {...getTableBodyProps()}>\n          {rows.slice(0, 10).map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>;\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                d => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  );\n}\n\nrender(<SelectableTable />);\n")),Object(c.b)("h3",null,"Sortable table"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"function SortableTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      // useSortBy\n      disableSortRemove: true,\n    },\n    useBlockLayout,\n    useSortBy,\n  );\n\n  return (\n    <Table isHoverable {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps(column.getSortByToggleProps())}>\n                <Box\n                  display=\"inline-block\"\n                  overflow=\"hidden\"\n                  textOverflow=\"ellipsis\"\n                  whiteSpace=\"nowrap\"\n                  maxWidth={`calc(100% - ${(column.isSorted ? '24px' : '0px')})`}\n                >\n                  {column.render('Header')}\n                </Box>\n                {column.isSorted && (\n                  <Box as=\"span\">\n                    <Space minWidth=\"1x\" />\n                    {\n                      column.isSortedDesc ? <TMIcon name=\"sort-down\" size={20} /> : <TMIcon name=\"sort-up\" size={20} />\n                    }\n                  </Box>\n                )}\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map(\n          (row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          }\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(<SortableTable />);\n")),Object(c.b)("h3",null,"Sticky table"),Object(c.b)("p",null,"In this examples, we use ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/malte-wessel/react-custom-scrollbars"}),Object(c.b)("inlineCode",{parentName:"a"},"react-custom-scrollbars"))," to display scrollbar."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"import { Scrollbars } from 'react-custom-scrollbars';")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"function StickyTable() {\n  const { colorMode } = useColorMode();\n  const scrollbarColor = colorMode === 'dark' ? 'white:tertiary' : 'black:tertiary';\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const tableHeaderRef = React.createRef();\n\n  const onScroll = (e) => {\n    const scrollLeft = e.target.scrollLeft;\n    if (!!tableHeaderRef && tableHeaderRef.current.scrollLeft !== scrollLeft) {\n      tableHeaderRef.current.scrollLeft = scrollLeft;\n    }\n  };\n\n  const renderThumb = props => {\n    return (\n      <Box\n        borderRadius=\"lg\"\n        bg={scrollbarColor}\n        {...props}\n      />\n    );\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Table\n      isHoverable\n      variant=\"outline\"\n      width={400}\n      height={200}\n      {...getTableProps()}\n    >\n      <TableHeader ref={tableHeaderRef}>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <Scrollbars\n        universal\n        renderThumbHorizontal={renderThumb}\n        renderThumbVertical={renderThumb}\n        onScroll={onScroll}\n      >\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Scrollbars>\n    </Table>\n  );\n}\n\nrender(<StickyTable />);\n")),Object(c.b)("h3",null,"Full width table"),Object(c.b)("p",null,"In this examples, we use ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/bvaughn/react-virtualized"}),Object(c.b)("inlineCode",{parentName:"a"},"react-virtualized"))," to get full width."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"import { AutoSizer } from 'react-virtualized';")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"function FullWidthTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      id: 'eventType',\n      accessor: 'eventType',\n      width: 'auto',\n    },\n    {\n      Header: 'Affected Devices',\n      id: 'affectedDevices',\n      accessor: 'affectedDevices',\n      width: 160,\n    },\n    {\n      Header: 'Detections',\n      id: 'detections',\n      accessor: 'detections',\n      width: '10%',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const getCalculatedColumns = ({ initColumns, tableWidth }) => {\n    const columns = initColumns.map(column => {\n      let columnWidth = column.width;\n      if (typeof columnWidth === 'string') {\n        const lastChar = columnWidth.substr(columnWidth.length - 1);\n        if (lastChar === '%') {\n          columnWidth = tableWidth * (parseFloat(columnWidth) / 100);\n          return {\n            ...column,\n            width: columnWidth\n          };\n        }\n        if (columnWidth === 'auto') {\n          return {\n            ...column,\n            width: 0\n          };\n        }\n      }\n      return column;\n    });\n    const customWidthColumns = columns.filter(column => !!column.width);\n    const totalCustomWidth = customWidthColumns.reduce((accumulator, column) => accumulator + column.width, 0);\n    let defaultCellWidth = (tableWidth - totalCustomWidth) / (columns.length - customWidthColumns.length);\n    defaultCellWidth = defaultCellWidth <= 0 ? 150 : defaultCellWidth;\n    return columns.map(column => {\n      if (!!column.width) {\n        return column;\n      }\n      return {\n        ...column,\n        width: defaultCellWidth\n      };\n    });\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Box height={300} overflow=\"auto\">\n      <AutoSizer>\n        {({ height, width }) => {\n          if (height === 0 || width === 0) {\n            return null;\n          }\n          const newColumns = getCalculatedColumns({ initColumns: columns, tableWidth: width });\n          return (\n            <Table\n              isHoverable\n              {...getTableProps()}\n            >\n              <TableHeader>\n                {headerGroups.map(headerGroup => (\n                  <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => {\n                      const columnId = column.id;\n                      const _column = newColumns.filter(column => column.id === columnId);\n                      const _columnWidth = _column[0].width;\n                      return (\n                        <TableHeaderCell\n                          width={_columnWidth}\n                          {...column.getHeaderProps()}\n                        >\n                          {column.render('Header')}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <TableBody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <TableRow {...row.getRowProps()}>\n                      {\n                        row.cells.map(cell => {\n                          const columnId = cell.column.id;\n                          const _column = newColumns.filter(column => column.id === columnId);\n                          const _columnWidth = _column[0].width;\n                          return (\n                            <TableCell\n                              width={_columnWidth}\n                              {...cell.getCellProps()}\n                            >\n                              {cell.render('Cell')}\n                            </TableCell>\n                          );\n                        })\n                      }\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          );\n        }}\n      </AutoSizer>\n    </Box>\n  );\n}\n\nrender(<FullWidthTable />);\n")),Object(c.b)("h2",null,"Props"),Object(c.b)("h3",null,"Table"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Table")," composes the ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"./flex"}),Object(c.b)("inlineCode",{parentName:"a"},"Flex"))," component."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Default"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"isHoverable"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Enable a hover state on TableRows.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"size"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'md'"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The size of TableCells. One of: ",Object(c.b)("inlineCode",{parentName:"td"},"'sm'"),", ",Object(c.b)("inlineCode",{parentName:"td"},"'md'"),", ",Object(c.b)("inlineCode",{parentName:"td"},"'lg'"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"variant"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'default'"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The variant of the table style to use. One of: ",Object(c.b)("inlineCode",{parentName:"td"},"'default'"),", ",Object(c.b)("inlineCode",{parentName:"td"},"'outline'"))))),Object(c.b)("h3",null,"TableHeaderCell / TableCell"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"TableHeaderCell")," and ",Object(c.b)("inlineCode",{parentName:"p"},"TableCell")," composes the ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"./box"}),Object(c.b)("inlineCode",{parentName:"a"},"Box"))," component."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Type"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Default"),Object(c.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"width"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string ","|"," number"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"150"),Object(c.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The width of the column.")))),Object(c.b)("h3",null,"Other Props"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableRow")," and ",Object(c.b)("inlineCode",{parentName:"li"},"TableHeaderRow")," composes the ",Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"./pseudobox"}),Object(c.b)("inlineCode",{parentName:"a"},"PseudoBox"))," component."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"TableHeader")," and ",Object(c.b)("inlineCode",{parentName:"li"},"TableBody")," composes the ",Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"./box"}),Object(c.b)("inlineCode",{parentName:"a"},"Box"))," component.")))}d.isMDXComponent=!0},HbGN:function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var a=t("+wNj");function l(e,n){if(null==e)return{};var t,l,r=Object(a.a)(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}},Km8e:function(e,n,t){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},Taxy:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/table",function(){return t("GYcT")}])},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return T}));var a=t("ERkP"),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=l.a.createContext({}),d=function(e){var n=l.a.useContext(i),t=n;return e&&(t="function"===typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=d(e.components);return l.a.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},m=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),s=d(t),p=a,m=s["".concat(o,".").concat(p)]||s[p]||u[p]||r;return t?l.a.createElement(m,c(c({ref:n},i),{},{components:t})):l.a.createElement(m,c({ref:n},i))}));function T(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var c={};for(var b in n)hasOwnProperty.call(n,b)&&(c[b]=n[b]);c.originalType=e,c[p]="string"===typeof e?e:a,o[1]=c;for(var i=2;i<r;i++)o[i]=t[i];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return a}))}},[["Taxy",0,1]]]);