(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{"+wNj":function(t,n,e){"use strict";function o(t,n){if(null==t)return{};var e,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}e.d(n,"a",(function(){return o}))},HbGN:function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var o=e("+wNj");function a(t,n){if(null==t)return{};var e,a,r=Object(o.a)(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}},Km8e:function(t,n,e){"use strict";var o=Object.assign.bind(Object);t.exports=o,t.exports.default=t.exports},ZVZ0:function(t,n,e){"use strict";e.d(n,"a",(function(){return p})),e.d(n,"b",(function(){return f}));var o=e("ERkP"),a=e.n(o);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function i(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function l(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?i(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,o,a=function(t,n){if(null==t)return{};var e,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var c=a.a.createContext({}),b=function(t){var n=a.a.useContext(c),e=n;return t&&(e="function"===typeof t?t(n):l(l({},n),t)),e},p=function(t){var n=b(t.components);return a.a.createElement(c.Provider,{value:n},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var n=t.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(t,n){var e=t.components,o=t.mdxType,r=t.originalType,i=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=b(e),u=o,d=p["".concat(i,".").concat(u)]||p[u]||m[u]||r;return e?a.a.createElement(d,l(l({ref:n},c),{},{components:e})):a.a.createElement(d,l({ref:n},c))}));function f(t,n){var e=arguments,o=n&&n.mdxType;if("string"===typeof t||o){var r=e.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=t,l[u]="string"===typeof t?t:o,i[1]=l;for(var c=2;c<r;c++)i[c]=e[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},cxan:function(t,n,e){"use strict";function o(){return(o=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}e.d(n,"a",(function(){return o}))},wrY4:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/usetoast",function(){return e("xUdK")}])},xUdK:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return b}));var o=e("cxan"),a=e("HbGN"),r=e("ERkP"),i=e.n(r),l=e("ZVZ0"),s=(i.a.createElement,{}),c="wrapper";function b(t){var n=t.components,e=Object(a.a)(t,["components"]);return Object(l.b)(c,Object(o.a)({},s,e,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"useToast"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"useToast")," Hook allows you to show up a toast notification that presents timely information, including confirmation of actions, alerts, and errors."),Object(l.b)("p",null,"See ",Object(l.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(l.b)("inlineCode",{parentName:"a"},"Toast"))," and ",Object(l.b)("a",Object(o.a)({parentName:"p"},{href:"./alerttoast"}),Object(l.b)("inlineCode",{parentName:"a"},"AlertToast"))," for more examples of how to use."),Object(l.b)("h2",null,"Import"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import useToast from '@trendmicro/react-styled-ui/useToast';\n// or\nimport { useToast } from '@trendmicro/react-styled-ui';\n")),Object(l.b)("h2",null,Object(l.b)("inlineCode",{parentName:"h2"},"useToast")),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const toast = useToast();\n")),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"useToast")," Hook returns an object with the following fields:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Name"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Type"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Default"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"notify"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"function"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"A function to trigger a toast notification.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"closeAll"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"function"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"A function To close all toast notificatios.")))),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),"function Example() {\n  // Get a toast function\n  const toast = useToast();\n\n  toast.notify({\n    // [optional] The position to display toast notifications.\n    position: 'bottom-right',\n\n    // [optional] The duration (in ms) that a toast notification remains visible and interactive.\n    duration: 5000,\n\n    render: ({ onClose, position }) => {\n      const styleProps = {\n        'top-left': { mt: '2x', mx: '4x' },\n        'top': { mt: '2x', mx: '4x' },\n        'top-right': { mt: '2x', mx: '4x' },\n        'bottom-left': { mb: '2x', mx: '4x' },\n        'bottom': { mb: '2x', mx: '4x' },\n        'bottom-right': { mb: '2x', mx: '4x' },\n      }[position];\n\n      return (\n        <ToastLayout {...styleProps}>\n          <ToastNotification onClose={onClose} />\n        </ToastLayout>\n      );\n    },\n  });\n}\n")),Object(l.b)("h3",null,"How to setup"),Object(l.b)("p",null,"First, you have to create a layout to wrap each toast notification as below:"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),'const ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  // Add a box shadow effect\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize="sm"\n      lineHeight="sm"\n      textAlign="left"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n')),Object(l.b)("p",null,"Then, create a ",Object(l.b)("inlineCode",{parentName:"p"},"ToastNotification")," component to wrap children:"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),"const ToastNotification = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n")),Object(l.b)("p",null,"Let's see how this works."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const ToastNotification = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast.notify({\n      position: 'bottom-right',\n      duration: 5000,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <ToastNotification onClose={onClose} />\n          </ToastLayout>\n        );\n      },\n    });\n  };\n  const handleCloseAll = () => {\n    toast.closeAll();\n  };\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n          Show\n        </Button>\n        <Space width=\"2x\" />\n        <Button variant=\"secondary\" onClick={handleCloseAll}>\n          Close All\n        </Button>\n      </Box>\n      <ToastLayout>\n        <ToastNotification />\n      </ToastLayout>\n    </>\n  );\n}\n\nrender(<Example />);\n")),Object(l.b)("h3",null,"Options"),Object(l.b)("h4",null,Object(l.b)("inlineCode",{parentName:"h4"},"position")),Object(l.b)("p",null,"You can display toast notifications in different positions, including ",Object(l.b)("inlineCode",{parentName:"p"},"top-left"),", ",Object(l.b)("inlineCode",{parentName:"p"},"top"),", ",Object(l.b)("inlineCode",{parentName:"p"},"top-right"),", ",Object(l.b)("inlineCode",{parentName:"p"},"bottom-left"),", ",Object(l.b)("inlineCode",{parentName:"p"},"bottom"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"bottom-right"),". The default value is ",Object(l.b)("inlineCode",{parentName:"p"},"top"),"."),Object(l.b)("h4",null,Object(l.b)("inlineCode",{parentName:"h4"},"duration")),Object(l.b)("p",null,"When the ",Object(l.b)("inlineCode",{parentName:"p"},"duration")," is set to ",Object(l.b)("inlineCode",{parentName:"p"},"null"),", the toast notification will appear indefinitely until manually closed by the user. The default value is ",Object(l.b)("inlineCode",{parentName:"p"},"5000")," in milliseconds."),Object(l.b)("h4",null,Object(l.b)("inlineCode",{parentName:"h4"},"render({ id, onClose, position, duration })")),Object(l.b)("p",null,"A render function that renders toast notifications."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const ToastBasic = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const duration = 5000; // in ms\n  const handleClickBy = (position) => () => {\n    toast.notify({\n      duration,\n      position,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <ToastBasic onClose={onClose} />\n          </ToastLayout>\n        );\n      }\n    });\n  };\n  const handleCloseAll = () => {\n    toast.closeAll();\n  };\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Button variant=\"secondary\" onClick={handleCloseAll}>\n          Close All\n        </Button>\n      </Box>\n      <Grid\n        gap=\"4x\"\n        templateColumns=\"1fr 1fr 1fr\"\n      >\n        <Button onClick={handleClickBy('top-left')}>\n          Top Left\n        </Button>\n        <Button onClick={handleClickBy('top')}>\n          Top\n        </Button>\n        <Button onClick={handleClickBy('top-right')}>\n          Top Right\n        </Button>\n        <Button onClick={handleClickBy('bottom-left')}>\n          Bottom Left\n        </Button>\n        <Button onClick={handleClickBy('bottom')}>\n          Bottom\n        </Button>\n        <Button onClick={handleClickBy('bottom-right')}>\n          Bottom Right\n        </Button>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n")))}b.isMDXComponent=!0}},[["wrY4",0,1]]]);