(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"+wNj":function(t,n,e){"use strict";function o(t,n){if(null==t)return{};var e,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}e.d(n,"a",(function(){return o}))},HbGN:function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var o=e("+wNj");function a(t,n){if(null==t)return{};var e,a,r=Object(o.a)(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}},Km8e:function(t,n,e){"use strict";var o=Object.assign.bind(Object);t.exports=o,t.exports.default=t.exports},ZVZ0:function(t,n,e){"use strict";e.d(n,"a",(function(){return p})),e.d(n,"b",(function(){return h}));var o=e("ERkP"),a=e.n(o);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function i(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function l(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?i(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,o,a=function(t,n){if(null==t)return{};var e,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)e=r[o],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var c=a.a.createContext({}),b=function(t){var n=a.a.useContext(c),e=n;return t&&(e="function"===typeof t?t(n):l(l({},n),t)),e},p=function(t){var n=b(t.components);return a.a.createElement(c.Provider,{value:n},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var n=t.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(t,n){var e=t.components,o=t.mdxType,r=t.originalType,i=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=b(e),u=o,d=p["".concat(i,".").concat(u)]||p[u]||m[u]||r;return e?a.a.createElement(d,l(l({ref:n},c),{},{components:e})):a.a.createElement(d,l({ref:n},c))}));function h(t,n){var e=arguments,o=n&&n.mdxType;if("string"===typeof t||o){var r=e.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=t,l[u]="string"===typeof t?t:o,i[1]=l;for(var c=2;c<r;c++)i[c]=e[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},cxan:function(t,n,e){"use strict";function o(){return(o=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}e.d(n,"a",(function(){return o}))},kNvk:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return b}));var o=e("cxan"),a=e("HbGN"),r=e("ERkP"),i=e.n(r),l=e("ZVZ0"),s=(i.a.createElement,{}),c="wrapper";function b(t){var n=t.components,e=Object(a.a)(t,["components"]);return Object(l.b)(c,Object(o.a)({},s,e,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"AlertToast"),Object(l.b)("p",null,"An alert toast is a toast that offers severity levels."),Object(l.b)("p",null,"If you're looking for a simple toast, just to check out the ",Object(l.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(l.b)("inlineCode",{parentName:"a"},"Toast"))," component."),Object(l.b)("h3",null,"Prerequisite"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"AlertToast")," component should work with the ",Object(l.b)("inlineCode",{parentName:"p"},"useToast")," Hook to trigger a toast notification."),Object(l.b)("p",null,"Learn more about the ",Object(l.b)("a",Object(o.a)({parentName:"p"},{href:"./usetoast"}),Object(l.b)("inlineCode",{parentName:"a"},"useToast"))," Hook."),Object(l.b)("h2",null,"Import"),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import AlertToast from '@trendmicro/react-styled-ui/AlertToast';\n// or\nimport { AlertToast } from '@trendmicro/react-styled-ui';\n")),Object(l.b)("h2",null,"Usage"),Object(l.b)("h3",null,"Layouts"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Increase the vertical padding space to ",Object(l.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(l.b)("inlineCode",{parentName:"li"},"1rem"),") for a multiline paragraph."),Object(l.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(l.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(l.b)("inlineCode",{parentName:"li"},"1rem"),") before the close button."),Object(l.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(l.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(l.b)("inlineCode",{parentName:"li"},"1rem"),") between the icon and the content."),Object(l.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(l.b)("inlineCode",{parentName:"li"},"2x")," (or ",Object(l.b)("inlineCode",{parentName:"li"},".5rem"),") between title and its content."),Object(l.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(l.b)("inlineCode",{parentName:"li"},"6x")," (or ",Object(l.b)("inlineCode",{parentName:"li"},"1.5rem"),") between the end of the content and the action button (or action link).")),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const AlertToastSimple = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose}>\n    <Text>This is a toast notification.</Text>\n  </AlertToast>\n);\n\nconst AlertToastWithIcon = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} py="4x">\n    <Flex align="flex-start">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithTitle = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Heading fontWeight="bold">Notification Title</Heading>\n    </Box>\n    <Box mr={-36}>\n      <Text>This is a toast notification.</Text>\n    </Box>\n  </AlertToast>\n);\n\nconst AlertToastWithActionButton = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithActionLink = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <Link>Action Link</Link>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithAllTogether = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Heading fontWeight="bold">Notification Title</Heading>\n    </Box>\n    <Flex align="flex-start" mb="6x">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </AlertToast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize="sm"\n      lineHeight="sm"\n      textAlign="left"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastNotification) => () => {\n    toast.notify({\n      position: \'bottom-right\',\n      duration: 5000,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          \'top-left\': { mt: \'2x\', mx: \'4x\' },\n          \'top\': { mt: \'2x\', mx: \'4x\' },\n          \'top-right\': { mt: \'2x\', mx: \'4x\' },\n          \'bottom-left\': { mb: \'2x\', mx: \'4x\' },\n          \'bottom\': { mb: \'2x\', mx: \'4x\' },\n          \'bottom-right\': { mb: \'2x\', mx: \'4x\' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <AlertToastNotification onClose={onClose} />\n          </ToastLayout>\n        );\n      },\n    });\n  };\n\n  return (\n    <>\n      <Stack direction="column" spacing="6x">\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastSimple)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastSimple />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithIcon)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastWithIcon />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithTitle)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastWithTitle />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithActionButton)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastWithActionButton />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithActionLink)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastWithActionLink />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithAllTogether)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastWithAllTogether />\n          </ToastLayout>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n')),Object(l.b)("h3",null,"Severity levels"),Object(l.b)("p",null,"The alert toast offers four severity levels, each has a distinctive icon and color."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const AlertToastSuccess = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} severity=\"success\">\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastInfo = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} severity=\"info\">\n    This is an info toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWarning = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} severity=\"warning\">\n    This is a warning toast alert.\n  </AlertToast>\n);\n\nconst AlertToastError = ({ onClose }) => (\n  <AlertToast isCloseButtonVisible onClose={onClose} severity=\"error\">\n    This is an error toast alert.\n  </AlertToast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastNotification) => () => {\n    toast.notify({\n      position: 'bottom-right',\n      duration: 5000,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <AlertToastNotification onClose={onClose} />\n          </ToastLayout>\n        );\n      },\n    });\n  };\n  const alertToasts = [\n    AlertToastSuccess,\n    AlertToastInfo,\n    AlertToastWarning,\n    AlertToastError,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {alertToasts.map((AlertToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(AlertToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <AlertToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n")),Object(l.b)("h3",null,"Icons"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"icon")," prop allows you to override the default icon for the specified severity."),Object(l.b)("p",null,"Setting the ",Object(l.b)("inlineCode",{parentName:"p"},"icon")," prop to ",Object(l.b)("inlineCode",{parentName:"p"},"false")," will remove the icon altogether."),Object(l.b)("pre",null,Object(l.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const AlertToastWithDefaultIcon = ({ onClose }) => (\n  <AlertToast\n    isCloseButtonVisible\n    onClose={onClose}\n    severity=\"success\"\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithAnotherIcon = ({ onClose }) => (\n  <AlertToast\n    isCloseButtonVisible\n    onClose={onClose}\n    severity=\"success\"\n    icon=\"_core.severity-success\"\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithProprietaryIcon = ({ onClose }) => (\n  <AlertToast\n    isCloseButtonVisible\n    onClose={onClose}\n    severity=\"success\"\n    icon={<TMIcon name=\"check-circle-o\" lineHeight={1} color=\"gray:80\" />}\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithoutIcon = ({ onClose }) => (\n  <AlertToast\n    isCloseButtonVisible\n    onClose={onClose}\n    severity=\"success\"\n    icon={false}\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastNotification) => () => {\n    toast.notify({\n      position: 'bottom-right',\n      duration: 5000,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <AlertToastNotification onClose={onClose} />\n          </ToastLayout>\n        );\n      },\n    });\n  };\n  const alertToasts = [\n    AlertToastWithDefaultIcon,\n    AlertToastWithAnotherIcon,\n    AlertToastWithProprietaryIcon,\n    AlertToastWithoutIcon,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {alertToasts.map((AlertToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(AlertToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <AlertToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n")),Object(l.b)("h2",null,"Props"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"AlertToast")," composes the ",Object(l.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(l.b)("inlineCode",{parentName:"a"},"Toast"))," component."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Name"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Type"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Default"),Object(l.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"isCloseButtonVisible"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"If ",Object(l.b)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"onClose"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"function"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"A callback called when the close button is clicked.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"severity"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"string"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"'success'"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"The severity level of the alert. One of: ",Object(l.b)("inlineCode",{parentName:"td"},"'success'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'info'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'warning'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'error'"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"icon"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"string ","|"," ReactNode ","|"," false"),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(l.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the ",Object(l.b)("inlineCode",{parentName:"td"},"severity")," prop.")))))}b.isMDXComponent=!0},"z7+t":function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/alerttoast",function(){return e("kNvk")}])}},[["z7+t",0,1]]]);