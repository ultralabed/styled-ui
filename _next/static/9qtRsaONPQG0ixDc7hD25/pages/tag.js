(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{"+wNj":function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}t.d(n,"a",(function(){return a}))},HbGN:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var a=t("+wNj");function r(e,n){if(null==e)return{};var t,r,i=Object(a.a)(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}},Km8e:function(e,n,t){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return g})),t.d(n,"b",(function(){return O}));var a=t("ERkP"),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),s=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"===typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=s(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),g=s(t),d=a,u=g["".concat(l,".").concat(d)]||g[d]||p[d]||i;return t?r.a.createElement(u,o(o({ref:n},b),{},{components:t})):r.a.createElement(u,o({ref:n},b))}));function O(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"===typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=t[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return a}))},"efS/":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tag",function(){return t("zfxO")}])},zfxO:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return s}));var a=t("cxan"),r=t("HbGN"),i=t("ERkP"),l=t.n(i),o=t("ZVZ0"),c=(l.a.createElement,{}),b="wrapper";function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)(b,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",null,"Tag"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Tag")," is used for items that need to be labeled, categorized, or organized using keywords that describe them."),Object(o.b)("h2",null,"Import"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import Tag from '@trendmicro/react-styled-ui/Tag';\n// or\nimport { Tag } from '@trendmicro/react-styled-ui';\n")),Object(o.b)("h2",null,"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Tag>Sample Tag</Tag>\n")),Object(o.b)("h3",null,"Variants"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the ",Object(o.b)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",Object(o.b)("inlineCode",{parentName:"p"},"solid"),", ",Object(o.b)("inlineCode",{parentName:"p"},"outline"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack direction="row" spacing="2x" shouldWrapChildren>\n  <Tag variant="solid">Solid Tag</Tag>\n  <Tag variant="outline">Outline Tag</Tag>\n</Stack>\n')),Object(o.b)("h3",null,"Colors"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"variantColor")," prop to change the color scheme of the ",Object(o.b)("inlineCode",{parentName:"p"},"Tag"),". ",Object(o.b)("inlineCode",{parentName:"p"},"variantColor")," can be any color key that exist in the ",Object(o.b)("inlineCode",{parentName:"p"},"theme.colors"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray">Gray</Tag>\n    <Tag variantColor="red">Red</Tag>\n    <Tag variantColor="magenta">Magenta</Tag>\n    <Tag variantColor="purple">Purple</Tag>\n    <Tag variantColor="blue">Blue</Tag>\n    <Tag variantColor="green">Green</Tag>\n    <Tag variantColor="teal">Teal</Tag>\n    <Tag variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray">Gray</Tag>\n    <Tag variant="outline" variantColor="red">Red</Tag>\n    <Tag variant="outline" variantColor="magenta">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple">Purple</Tag>\n    <Tag variant="outline" variantColor="blue">Blue</Tag>\n    <Tag variant="outline" variantColor="green">Green</Tag>\n    <Tag variant="outline" variantColor="teal">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variant="outline" variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variant="outline" variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variant="outline" variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variant="outline" variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variant="outline" variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n</Stack>\n')),Object(o.b)("h3",null,"Sizes"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",Object(o.b)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",Object(o.b)("inlineCode",{parentName:"p"},"sm"),", ",Object(o.b)("inlineCode",{parentName:"p"},"md"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"lg"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variantColor="gray">Small</Tag>\n    <Tag size="md" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variantColor="gray">Large</Tag>\n  </Stack>\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variant="outline" variantColor="gray">Small</Tag>\n    <Tag size="md" variant="outline" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variant="outline" variantColor="gray">Large</Tag>\n  </Stack>\n</Stack>\n')),Object(o.b)("h3",null,"States"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag isCloseButtonVisible>Normal</Tag>\n    <Tag isCloseButtonVisible disabled>Disabled</Tag>\n    <Tag isCloseButtonVisible isInvalid>Invalid</Tag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag variant="outline" isCloseButtonVisible>Normal</Tag>\n    <Tag variant="outline" isCloseButtonVisible disabled>Disabled</Tag>\n    <Tag variant="outline" isCloseButtonVisible isInvalid>Invalid</Tag>\n  </Stack>\n</Stack>\n')),Object(o.b)("h3",null,"Editable tag"),Object(o.b)("p",null,"In this example, setting invalid style when value is empty after editing tag."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const EditableTag = ({\n  children,\n  isInvalid,\n  onChange,\n  ...rest\n}) => {\n    const [inputValue, setInputValue] = React.useState(children);\n    const [inputVisible, setInputVisible] = React.useState(false);\n    const handleInputVisible = () => setInputVisible(true);\n    const handleInputHidden = () => setInputVisible(false);\n    const handleInputBlur = (e) => {\n      onChange(e);\n      handleInputHidden();\n    };\n    const handleInputKeyUp = (e) => {\n      const keyCode = event.keyCode;\n      if (keyCode === 13) {\n        onChange(e);\n        handleInputHidden();\n      }\n      if (keyCode === 27) {\n        handleInputHidden();\n      }\n    };\n    const handleTagClick = (e) => {\n      e.stopPropagation();\n      handleInputVisible();\n    };\n    const handleTagKeyUp = (e) => {\n      const keyCode = event.keyCode;\n      if (keyCode === 13) {\n        handleInputVisible();\n      }\n    };\n\n    if (inputVisible) {\n      return (\n        <InputBase\n          autoFocus\n          minHeight="6x"\n          mr="2x"\n          mt="1x"\n          defaultValue={inputValue}\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n        />\n      );\n    }\n    return (\n      <Tag\n        isCloseButtonVisible\n        isInvalid={isInvalid}\n        mr="2x"\n        mt="1x"\n        onClick={handleTagClick}\n        onKeyUp={handleTagKeyUp}\n        cursor="pointer"\n        {...!isInvalid && {\n          _hover: {\n            \'&:not(:focus)\': {\n              bg: \'gray:60\',\n              \'& > :first-child\': {\n                bg: \'gray:60\',\n              },\n            },\n          }\n        }}\n        {...isInvalid && {\n          _hover: {\n            \'&:not(:focus)\': {\n              bg: \'red:50\',\n              \'& > :first-child\': {\n                bg: \'red:50\',\n              },\n            },\n          }\n        }}\n        {...rest}\n      >\n        {children}\n      </Tag>\n    );\n};\n\nfunction Tags() {\n  const [inputValue, setInputValue] = React.useState();\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const [tags, setTags] = React.useState([]);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const inputValue = e.target.value;\n    let newTags = tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      newTags = [...tags, inputValue];\n    }\n    setTags(newTags);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = event.keyCode;\n    if (keyCode === 13) {\n      const inputValue = e.target.value;\n      let newTags = tags;\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        newTags = [...tags, inputValue];\n      }\n      setTags(newTags);\n      handleInputHidden();\n    }\n\n    if (keyCode === 27) {\n      handleInputHidden();\n    }\n  };\n  const handleTagChange = (index) => (e) => {\n    const inputValue = e.target.value;\n    let newTags = tags;\n    newTags[index] = inputValue;\n    setTags([...newTags]);\n  };\n  const handleTagClose = (index) => (e) => {\n    e.stopPropagation();\n    tags.splice(index, 1);\n    setTags([...tags]);\n  };\n\n  return (\n    <Box>\n      {\n        tags.map((tag, i) => {\n          return (\n            <EditableTag\n              key={i}\n              isInvalid={tag.length === 0}\n              onChange={handleTagChange(i)}\n              onClose={handleTagClose(i)}\n            >\n              {tag}\n            </EditableTag>\n          );\n        })\n      }\n      { !inputVisible && (\n        <Box\n          display="inline-flex"\n          alignItems="center"\n          borderRadius="sm"\n          border="1px dotted"\n          borderColor="gray:60"\n          width={92}\n          Height="6x"\n          py={2}\n          pl="2x"\n          pr="1x"\n          mt="1x"\n          onClick={handleInputVisible}\n        >\n          <TMIcon name="add" color="white:tertiary" />\n          <Space width="2x" />\n          <Text\n            color="white:secondary"\n            fontSize="xs"\n            lineHeight="xs"\n          >\n            New Tag\n          </Text>\n        </Box>\n      )}\n      { inputVisible && (\n        <InputBase\n          autoFocus\n          minHeight="6x"\n          mt="1x"\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n        />\n      )}\n    </Box>\n  );\n}\n\nrender(<Tags />);\n')),Object(o.b)("h2",null,"Props"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Type"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Default"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"disabled"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(o.b)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",Object(o.b)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",Object(o.b)("inlineCode",{parentName:"td"},"_disabled")," prop.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"isInvalid"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(o.b)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",Object(o.b)("inlineCode",{parentName:"td"},"_invalid")," prop.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"isCloseButtonVisible"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(o.b)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"onClose"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"function"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"A callback called when the close button is clicked.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"size"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'md'"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The size of the tag component. One of: ",Object(o.b)("inlineCode",{parentName:"td"},"'sm'"),", ",Object(o.b)("inlineCode",{parentName:"td"},"'md'"),", ",Object(o.b)("inlineCode",{parentName:"td"},"'lg'"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"variant"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'solid'"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The variant style of the tag component. One of: ",Object(o.b)("inlineCode",{parentName:"td"},"'solid'"),", ",Object(o.b)("inlineCode",{parentName:"td"},"'outline'"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"variantColor"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'gray'"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The color scheme of the tag variant. It must be a color key defined in ",Object(o.b)("inlineCode",{parentName:"td"},"theme.colors"),".")))))}s.isMDXComponent=!0}},[["efS/",0,1]]]);